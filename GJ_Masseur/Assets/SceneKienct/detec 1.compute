#pragma kernel CSMain

Texture2D<float4> reader; 
Texture2D<float4> reader2;
RWTexture2D<float4> writer;
RWTexture2D<float4> writer2;
SamplerState _LinearClamp;
float _time;
float _img1;
float _img2;
float _img3;
float _img4;
float _img5;
float _img6;
float _s1;
float _s2;
float _s3;
float _s4;
float _s5;
float _s6;
float _rx1;
float _rx2;
float _ry1;
float _ry2;
float _blur;
float2 map(float2 value, float2 min1, float2 max1, float2 min2, float2 max2) {
	return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
}
[numthreads(8,8,1)]
void CSMain (uint2 id : SV_DispatchThreadID) 
{
	
	float2 f = float2(id.x,id.y);
	float2 res=float2(1024.,1024.); 
	float2 uv = f / res;
	float m1 = smoothstep(_s3, _s4, distance(uv, float2(0.5, 0.5))) * smoothstep(_s5, _s6, uv.y);
	float2 uv2 = map(uv, float2(1., 1.), float2(0., 0.), float2(_rx1, _ry1), float2(_rx2, _ry2));
	float b = sqrt(64.);
	float d0 = 0.;
	for(float i = -0.5*b ; i <= 0.5*b; i+=1.)
		for (float j = -0.5 * b; j <= 0.5 * b; j += 1.) {
			d0 += reader2.SampleLevel(_LinearClamp, uv2 +float2(i,j)*0.005*_blur+ 0.5 / res, 0).x;
		}
	d0 /= 70.;
	d0 = clamp(d0, 0., 1.);
	//float d1 = smoothstep(_s1, _s2,d0 )*m1;
	float d1 = smoothstep(0.1, 0.05, distance(uv + float2(0., sin(uv.x * 50. + _time) * 0.05), float2(cos(_time), sin(_time)) * 0.25 + 0.5));
	float4 d2 = reader.SampleLevel(_LinearClamp, uv + 0.5 / res, 0);
	float d3 = lerp(d1, d2.x, step(0.5, _img1));
	float d4 = lerp(d1, d2.y, step(0.5, _img2));
	float d5 = lerp(d1, d2.z, step(0.5, _img3));
	float d6 = lerp(d1, d2.a, step(0.5, _img4));
	writer[id]=float4(d3,d4,d5,d6);
	writer2[id] = float4(d1, d1, d1,1.);
}
